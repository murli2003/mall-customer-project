# -*- coding: utf-8 -*-
"""Project-Mall Customer Segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TnOBz5WTBvXwTcFKuEdt1xnbIunUWWjH

## Data Collection
"""

import pandas as pd

# Load the dataset
file_path = 'Mall_Customers.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset
data.head(10)

count=data.isnull().sum()
count

data.head(10)

# Renaming columns for better readability
data.columns = ["CustomerID", "Gender", "Age", "AnnualIncome", "SpendingScore"]

data

mode_gender=data['Gender'].mode()[0]
type(mode_gender)
mode_gender

data.head(20)

# Data transformation (e.g., encoding categorical variables)
data['Gender'] = data['Gender'].map({'Male': 0, 'Female': 1})

data

"""## EDA"""

data.describe()

import matplotlib.pyplot as plt
import seaborn as sns

#histplot-Age,Annual income,Spending score
# Visualizing distributions
plt.figure(figsize=(10, 6))
sns.histplot(data['Age'], bins=30, kde=True)
plt.title('Age Distribution')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data['AnnualIncome'], bins=30, kde=True)
plt.title('Annual Income Distribution')
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(data['SpendingScore'], bins=30, kde=True)
plt.title('Spending Score Distribution')
plt.show()

# Visualizing relationships
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='AnnualIncome', y='SpendingScore', hue='Gender')
plt.title('Income vs Spending Score')
plt.show()

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Feature selection
features = data[['Age', 'AnnualIncome', 'SpendingScore']]

# Standardizing the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Applying K-Means clustering
kmeans = KMeans(n_clusters=5, random_state=42)
data['Cluster'] = kmeans.fit_predict(scaled_features)

# Evaluating cluster quality
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='AnnualIncome', y='SpendingScore', hue='Cluster', palette='viridis')
plt.title('Customer Segments')
plt.show()

"""Assigning the independent variable since it is Clustering Model there's no dependent variable."""

x=data.iloc[:,[3,4]].values

"""Finding the WCSS (Within Cluster Sum of Square) values using KMeans Clustering Model"""

wcss=[]
for i in range(2,11):
    kmeans=KMeans(n_clusters=i)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)
display(wcss)

"""Plotting the Line Graph with WCSS Values to get the exact ideal number of clusters to be created using KMeans Clustering Algorithm and saving the PNG file of the graph."""

plt.plot(range(2,11),wcss)
plt.title('Elbow Method')
plt.xlabel('No. of Clusters')
plt.ylabel('WCSS')
plt.savefig('Elbow Method Graph.png')
plt.show()

"""Fitting the KMeans Clustering model with ideal number of clusters found from Elbow Method Graph and getting the dataset belonging to the Cluster."""

kmeans=KMeans(n_clusters=5)
kmeans.fit(x)
y_kmeans=kmeans.labels_
display(y_kmeans)

"""Plotting the Scatter Plot Graph with the independent variable and the Cluster which it belongs and saving the PNG file."""

plt.scatter(x[y_kmeans==0,0],x[y_kmeans==0,1],c='r',s=100,label='Cluster 1')
plt.scatter(x[y_kmeans==1,0],x[y_kmeans==1,1],c='b',s=100,label='Cluster 2')
plt.scatter(x[y_kmeans==2,0],x[y_kmeans==2,1],c='g',s=100,label='Cluster 3')
plt.scatter(x[y_kmeans==3,0],x[y_kmeans==3,1],c='m',s=100,label='Cluster 4')
plt.scatter(x[y_kmeans==4,0],x[y_kmeans==4,1],c='c',s=100,label='Cluster 5')
plt.title('KMeans Clustering Spread')
plt.savefig('Kmeans Clustering Spread Graph.png')
plt.legend()
plt.show()

"""Merging the Cluster Number and adding the sepearte column for it with Original Dataset and displaying the resulting dataset"""

result=pd.concat([data,pd.DataFrame(y_kmeans,columns=['Cluster Number'])],axis=1)
display(result)

"""Grouping By The Cluster Number to see the number of values in each Clusters"""

result.groupby('Cluster Number').size()

"""Grouping by the Cluster Number with respect to Annual Income and Spending Score to get the Minimum, Maximum values of Annual Income and Spending Score for each Clusters."""

import numpy as np

result.groupby('Cluster Number').agg({'AnnualIncome':[np.min,np.max],'SpendingScore':[np.min,np.max]})

"""Fitting the Agglomerative Clustering model with ideal number of clusters found from the Dendrogram using Ward Method and predicting the dataset belonging to the Cluster."""

from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters=5, linkage='ward')
y_hc = hc.fit_predict(x)

"""**Plotting the Scatter Plot Graph with the independent variable and the Cluster which it belongs and saving the PNG file.**"""

plt.scatter(x[y_hc==0,0],x[y_hc==0,1],c='r',s=100,label='Cluster 1')
plt.scatter(x[y_hc==1,0],x[y_hc==1,1],c='b',s=100,label='Cluster 2')
plt.scatter(x[y_hc==2,0],x[y_hc==2,1],c='g',s=100,label='Cluster 3')
plt.scatter(x[y_hc==3,0],x[y_hc==3,1],c='m',s=100,label='Cluster 4')
plt.scatter(x[y_hc==4,0],x[y_hc==4,1],c='c',s=100,label='Cluster 5')
plt.title('Hierarchical Clustering Spread - Ward')
plt.savefig('Hierarchical Clustering Spread - Ward.png')
plt.legend()
plt.show()

"""Merging the Cluster Number and adding the sepearte column for it with Original Dataset and displaying the resulting dataset"""

result_hc_ward=pd.concat([data,pd.DataFrame(y_hc,columns=['Cluster Number'])],axis=1)
display(result_hc_ward)

"""Grouping by the Cluster Number with respect to Annual Income and Spending Score to get the Minimum, Maximum values of Annual Income and Spending Score and the number of values in each Clusters"""

result_hc_ward.groupby('Cluster Number').agg({'AnnualIncome':[np.min,np.max],'SpendingScore':[np.min,np.max,np.size]})

"""Fitting the Agglomerative Clustering model with ideal number of clusters found from the Dendrogram using Single Method and predicting the dataset belonging to the Cluster."""

hc1=AgglomerativeClustering(n_clusters=7,linkage='single')
y_hc1=hc1.fit_predict(x)

"""Plotting the Scatter Plot Graph with the independent variable and the Cluster which it belongs and saving the PNG file."""

plt.scatter(x[y_hc1==0,0],x[y_hc1==0,1],s=100,label='Cluster 1')
plt.scatter(x[y_hc1==1,0],x[y_hc1==1,1],s=100,label='Cluster 2')
plt.scatter(x[y_hc1==2,0],x[y_hc1==2,1],s=100,label='Cluster 3')
plt.scatter(x[y_hc1==3,0],x[y_hc1==3,1],s=100,label='Cluster 4')
plt.scatter(x[y_hc1==4,0],x[y_hc1==4,1],s=100,label='Cluster 5')
plt.scatter(x[y_hc1==5,0],x[y_hc1==5,1],s=100,label='Cluster 6')
plt.scatter(x[y_hc1==6,0],x[y_hc1==6,1],s=100,label='Cluster 7')
plt.title('Hierarchical Clustering Spread - Single')
plt.savefig('Hierarchical Clustering Spread - Single.png')
plt.legend()
plt.show()

"""Merging the Cluster Number and adding the sepearte column for it with Original Dataset and displaying the resulting dataset"""

result_hc_single=pd.concat([data,pd.DataFrame(y_hc1,columns=['Cluster Number'])],axis=1)
display(result_hc_single)

"""Grouping by the Cluster Number with respect to Annual Income and Spending Score to get the Minimum, Maximum values of Annual Income and Spending Score and the number of values in each Clusters."""

result_hc_single.groupby('Cluster Number').agg({'AnnualIncome':[np.min,np.max],'SpendingScore':[np.min,np.max,np.size]})

"""Plotting the histogram Graph using Complete Method to find out the exact ideal number of clusters to be created using Agglomerative Clustering Model with Complete Linkage and saving the PNG file"""

import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import linkage

hist = plt.hist(linkage(x, method='complete'))
plt.title('Histogram - Complete')
plt.xlabel('Customers')
plt.ylabel('ED')
plt.savefig('Histogram Complete.png')
plt.show()

"""Fitting the Agglomerative Clustering model with ideal number of clusters found from the Dendrogram using Complete Method and predicting the dataset belonging to the Cluster"""

hc2=AgglomerativeClustering(n_clusters=5,linkage='complete')
y_hc2=hc2.fit_predict(x)

"""**Plotting the Scatter Plot Graph with the independent variable and the Cluster which it belongs and saving the PNG file.**"""

plt.scatter(x[y_hc2==0,0],x[y_hc2==0,1],s=100,label='Cluster 1')
plt.scatter(x[y_hc2==1,0],x[y_hc2==1,1],s=100,label='Cluster 2')
plt.scatter(x[y_hc2==2,0],x[y_hc2==2,1],s=100,label='Cluster 3')
plt.scatter(x[y_hc2==3,0],x[y_hc2==3,1],s=100,label='Cluster 4')
plt.scatter(x[y_hc2==4,0],x[y_hc2==4,1],s=100,label='Cluster 5')
plt.title('Hierarchical Clustering Spread - Complete')
plt.savefig('Hierarchical Clustering Spread - Complete.png')
plt.legend()
plt.show()

"""Merging the Cluster Number and adding the sepearte column for it with Original Dataset and displaying the resulting dataset"""

result_hc_complete=pd.concat([data,pd.DataFrame(y_hc2,columns=['Cluster Number'])],axis=1)
display(result_hc_complete)

"""Grouping by the Cluster Number with respect to Annual Income and Spending Score to get the Minimum, Maximum values of Annual Income and Spending Score and the number of values in each Clusters."""

result_hc_complete.groupby('Cluster Number').agg({'AnnualIncome':[np.min,np.max],'SpendingScore':[np.min,np.max,np.size]})

"""Fitting the Agglomerative Clustering model with ideal number of clusters found from the Dendrogram using Average Method and predicting the dataset belonging to the Cluster."""

hc3=AgglomerativeClustering(n_clusters=7,linkage='average')
y_hc3=hc3.fit_predict(x)

"""Plotting the Scatter Plot Graph with the independent variable and the Cluster which it belongs and saving the PNG file."""

plt.scatter(x[y_hc3==0,0],x[y_hc3==0,1],s=100,label='Cluster 1')
plt.scatter(x[y_hc3==1,0],x[y_hc3==1,1],s=100,label='Cluster 2')
plt.scatter(x[y_hc3==2,0],x[y_hc3==2,1],s=100,label='Cluster 3')
plt.scatter(x[y_hc3==3,0],x[y_hc3==3,1],s=100,label='Cluster 4')
plt.scatter(x[y_hc3==4,0],x[y_hc3==4,1],s=100,label='Cluster 5')
plt.scatter(x[y_hc3==5,0],x[y_hc3==5,1],s=100,label='Cluster 6')
plt.scatter(x[y_hc3==6,0],x[y_hc3==6,1],s=100,label='Cluster 7')
plt.title('Hierarchical Clustering Spread - Complete')
plt.savefig('Hierarchical Clustering Spread - Complete.png')
plt.legend()
plt.show()

"""Merging the Cluster Number and adding the sepearte column for it with Original Dataset and displaying the resulting dataset"""

result_hc_average=pd.concat([data,pd.DataFrame(y_hc3,columns=['Cluster Number'])],axis=1)
display(result_hc_average)

"""Grouping by the Cluster Number with respect to Annual Income and Spending Score to get the Minimum, Maximum values of Annual Income and Spending Score and the number of values in each Clusters."""

result_hc_average.groupby('Cluster Number').agg({'AnnualIncome':[np.min,np.max],'SpendingScore':[np.min,np.max,np.size]})